import sys
import traceback
import pandas as pd
from io import StringIO
from typing import Any
from ...domain.entities import AnalyzeCode, DataSummary
from ...domain.repositories import ICodeExecutor


class SandboxedCodeExecutor(ICodeExecutor):
    """Sandboxed implementation of the code executor interface.

    This class provides a restricted environment for executing Python code
    generated by the LLM, with safety measures to prevent malicious execution.
    """

    def __init__(self):
        """Initialize the sandboxed code executor."""
        self.allowed_modules = {
            "pandas": pd,
            "numpy": __import__("numpy"),
            "plotly": __import__("plotly"),
            "plotly.express": __import__("plotly.express"),
            "plotly.graph_objects": __import__("plotly.graph_objects")
        }

    def execute_code(
        self,
        code: AnalyzeCode,
        dataset: Any
    ) -> DataSummary:
        """Execute analysis code on the dataset in a sandboxed environment.

        Args:
            code: The analysis code to execute.
            dataset: The dataset to analyze (typically a pandas DataFrame).

        Returns:
            DataSummary with execution results.

        Raises:
            CodeExecutionError: If the code execution fails.
        """

        # Create a safe execution environment
        safe_globals = {
            "__builtins__": {
                "print": print,
                "len": len,
                "range": range,
                "enumerate": enumerate,
                "zip": zip,
                "max": max,
                "min": min,
                "sum": sum,
                "abs": abs,
                "round": round,
                "str": str,
                "int": int,
                "float": float,
                "bool": bool,
                "list": list,
                "dict": dict,
                "tuple": tuple,
                "set": set,
                "__import__": __import__  # Allow imports in sandboxed code
            },
            **self.allowed_modules, # Add allowed modules
            "df": dataset.copy()    # Add the dataset as 'df'
        }

        # Capture output
        old_stdout = sys.stdout
        sys.stdout = captured_output = StringIO()

        try:
            # Execute the code
            exec(code.code, safe_globals)

            # Get the output
            output = captured_output.getvalue()

            # Look for results in the global namespace
            result_data = safe_globals.get("result", None)
            summary_text = output or "Code executed successfully"

            return DataSummary(
                data=result_data,
                summary_text=summary_text,
                execution_successful=True,
                error_message=None
            )
        except Exception as e:
            error_message = f"Code execution failed: {str(e)}\n{traceback.format_exc()}"
            return DataSummary(
                data=None,
                summary_text="Code execution failed",
                execution_successful=False,
                error_message=error_message
            )
        finally:
            # Restore stdout
            sys.stdout = old_stdout

