from enum import Enum
from typing import Any, Optional
from dataclasses import dataclass


class VisualizationType(Enum):
    """Enumeration of supported visualization types."""
    
    BAR = "bar"
    LINE = "line"
    PIE = "pie"
    SCATTER = "scatter"


class ProcessingStatus(Enum):
    """Enumeration of processing statuses."""
    
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"


@dataclass(frozen=True)
class Question:
    """Represents a user question about the dataset.

    Attributes:
        text: The natural language question text.
        language: The language of the question (e.g., 'en', 'id').
    """

    text: str
    language: str = "en"


@dataclass(frozen=True)
class Answer:
    """Represents an answer generated by the LLM.

    Attributes:
        text: The textual answer explaining the analysis.
        confidence_score: A score from 0 to 1 indicating confidence.
        explanation: Additional explanation of how the answer was derived.
    """

    text: str
    confidence_score: float
    explanation: Optional[str] = None


@dataclass(frozen=True)
class AnalyzeCode:
    """Represents Python code generated for data analysis.

    Attributes:
        code: The Python code string to be executed.
        description: Description of what the code does.
    """

    code: str
    description: str


@dataclass(frozen=True)
class DataSummary:
    """Represents the result of executing analysis code.

    Attributes:
        data: The processed data (could be DataFrame, dict, etc.).
        summary_text: Text summary of the results.
        execution_successful: Whether the code executed successfully.
        error_message: Error message if execution failed.
    """

    data: Any
    summary_text: str
    execution_successful: bool
    error_message: Optional[str] = None


@dataclass(frozen=True)
class Visualization:
    """Represents a data visualization.

    Attributes:
        chart_type: The type of chart (bar, line, pie, etc.).
        chart_object: The plotly chart object.
        title: The title of the chart.
        description: Description of what the visualization shows.
        config: Additional configuration for the chart.
    """

    chart_type: VisualizationType
    chart_object: Any
    title: str
    description: str
    config: Optional[dict[str, Any]] = None


@dataclass(frozen=True)
class AnalysisResult:
    """Represents the complete result of analyzing a question.

    This is the main entity that combines all components of the analysis.

    Attributes:
        question: The original question.
        answer: The LLM-generated answer.
        data_summary: The actual results from code execution.
        visualization: The generated visualization.
        execution_time: Time taken to process the question (in seconds).
    """

    question: Question
    answer: Answer
    data_summary: DataSummary
    visualization: Optional[Visualization]
    execution_time: float


@dataclass(frozen=True)
class DatasetInfo:
    """Information about the dataset being analyzed.

    Attributes:
        filename: Name of the data file.
        columns: List of column names.
        shape: Shape of the dataset (rows, columns).
        sample_data: Sample rows from the dataset.
        column_types: Dictionary mapping column names to their data types.
    """
    
    filename: str
    columns: list[str]
    shape: tuple[int, int]
    sample_data: Any
    column_types: dict[str, str]


@dataclass(frozen=True)
class ProcessingError:
    """Represents an error that occurred during processing.

    Attributes:
        error_type: Type of error (e.g., 'api_error', 'code_execution').
        message: Human-readable error message.
        details: Additional technical details.
        retry_suggested: Whether retrying might help.
    """
    
    error_type: str
    message: str
    details: Optional[str] = None
    retry_suggested: bool = False
