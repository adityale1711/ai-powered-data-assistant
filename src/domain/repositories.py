from abc import ABC, abstractmethod
from typing import Any, Optional
from .entities import (
    AnalyzeCode,
    Answer,
    DatasetInfo,
    DataSummary,
    Question,
    Visualization,
    VisualizationType
)


class ILLMProvider(ABC):
    """Interface for Large Language Model providers.

    This interface defines the contract for LLM services that can process
    natural language questions and generate answers with analysis code.
    """

    @abstractmethod
    async def generate_answer(
        self,
        question: Question,
        dataset_info: DatasetInfo
    ) -> tuple[Answer, AnalyzeCode]:
        """Generate an answer and analysis code for a given question.

        Args:
            question: The user's question about the dataset.
            dataset_info: Information about the dataset structure.

        Returns:
            A tuple containing the answer and generated analysis code.

        Raises:
            LLMProviderError: If the LLM service fails to generate a response.
        """
        pass

    @abstractmethod
    async def generate_answer_with_prompt(
        self,
        question: Question,
        dataset_info: DatasetInfo,
        prompt: str
    ) -> tuple[Answer, AnalyzeCode]:
        """Generate an answer and analysis code using a pre-built prompt.

        Args:
            question: The user's question about the dataset.
            dataset_info: Information about the dataset structure.
            prompt: The complete prompt to send to the LLM.

        Returns:
            A tuple containing the answer and generated analysis code.

        Raises:
            LLMProviderError: If the LLM provider fails to generate an answer.
        """
        pass


class IDataRepository(ABC):
    """Interface for data access operations.

    This interface defines the contract for loading and managing
    dataset operations.
    """

    @abstractmethod
    def load_dataset(
        self,
        file_path: str
    ) -> DatasetInfo:
        """Load and return dataset information.

        Args:
            file_path: Path to the dataset file.

        Returns:
            DatasetInfo object with dataset metadata.

        Raises:
            DataLoadError: If the dataset cannot be loaded.
        """
        pass

    @abstractmethod
    def get_dataset(self) -> Any:
        """Get the loaded dataset.

        Returns:
            The dataset object (e.g., pandas DataFrame).

        Raises:
            DatasetNotLoadedError: If no dataset is loaded.
        """
        pass


class ICodeExecutor(ABC):
    """Interface for executing dynamically generated code.

    This interface defines the contract for safely executing Python code
    generated by the LLM, with proper sandboxing and security measures.
    """

    @abstractmethod
    async def execute_code(
        self,
        code: AnalyzeCode,
        dataset: Any
    ) -> DataSummary:
        """Execute analysis code on the dataset.

        Args:
            code: The analysis code to execute.
            dataset: The dataset to analyze.

        Returns:
            DataSummary with execution results.

        Raises:
            CodeExecutionError: If the code execution fails.
        """
        pass


class IChartGenerator(ABC):
    """Interface for generating data .

    This interface defines the contract for creating charts and graphs
    based on analysis results.
    """

    @abstractmethod
    def generate_chart(
        self,
        chart_type: VisualizationType,
        data: Any,
        title: str,
        config: Optional[dict[str, Any]] = None
    ) -> Visualization:
        """Generate a visualization based on the data.

        Args:
            chart_type: Type of chart to generate.
            data: Data to visualize.
            title: Chart title.
            config: Additional chart configuration.

        Returns:
            Visualization object with the generated chart.

        Raises:
            ChartGenerationError: If chart generation fails.
        """
        pass


class IPromptService(ABC):
    """Interface for prompt construction and management.

    This interface defines the contract for building and managing
    prompts sent to the LLM.
    """

    @abstractmethod
    def build_analysis_prompt(
        self,
        question: Question,
        dataset_info: DatasetInfo
    ) -> str:
        """Build a comprehensive prompt for the LLM.

        Args:
            question: The user's question.
            dataset_info: Information about the dataset.

        Returns:
            A formatted prompt string for the LLM.
        """
        pass


# Custom exception classes for better error handling
class LLMProviderError(Exception):
    """Exception raised for errors in the LLM provider."""
    pass


class DataLoadError(Exception):
    """Exception raised for errors in loading datasets."""
    pass


class DatasetNotLoadedError(Exception):
    """Exception raised when attempting to access an unloaded dataset."""
    pass


class CodeExecutionError(Exception):
    """Exception raised for errors during code execution."""
    pass


class ChartGenerationError(Exception):
    """Exception raised for errors in chart generation."""
    pass
